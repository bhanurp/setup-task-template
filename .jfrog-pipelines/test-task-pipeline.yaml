template: true
valuesFilePath: ./values.yml

resources:
  - name: package_template
    type: GitRepo
    configuration:
      path: {{ .Values.repoPath }}
      gitProvider: {{ .Values.gitIntegration }}
      branches:
        include: ^{{ .Values.mainBranch }}$
      cloneProtocol: https

pipelines:
  - name: package_template_test
    configuration:
      jfrogCliVersion: 2
      runtime:
        type: image
        image:
          custom:
            name: releases-docker.jfrog.io/jfrog/pipelines-u18node
            tag: "16"
            autoPull: true
      environmentVariables:
        readOnly:
          RESOLVE_REPO: npm-virtual

    steps:
      - name: test_task
        type: Bash
        configuration:
          inputResources:
            - name: package_template
          integrations:
            - name: {{ .Values.artIntegration }}
        execution:
          onStart:
            - task: jfrog/setup-node@v0.0.1
              input:
                version: "{{ .Values.nodeVersion }}"
                cacheRepository: "{{ .Values.cacheArtIntegration}}"
            - echo $OUT_setup_node_demo_node_path
            - echo $OUT_setup_node_demo_node_bin
          onExecute:
            - pushd $res_package_template_resourcePath
            # Configure JFrog CLI
            - jfrog npmc --repo-resolve $RESOLVE_REPO
            # Install npm dependencies
            - jfrog npm install
            # Build task runnable script bundled with dependencies
            - npm run dist
            # create test coverage report
            #- npx jest --coverage
            - echo "$pipeline_name"
            - popd
            # Run task
            - task: $res_package_template_resourcePath
              id: package_template_test
              input:
                # control feature releases - NA
                api: "developer"
            - echo "package_template task executed successfully"
          onComplete:
            - echo "Slack Notify Test done!"
