template: true
valuesFilePath: ./values.yml

resources:
  - name: setup_yarn_publish
    type: GitRepo
    configuration:
      path: {{ .Values.repoPath }}
      gitProvider: {{ .Values.gitIntegration }}
      branches:
        include: ^{{ .Values.mainBranch }}$
      cloneProtocol: https

pipelines:
  - name: setup_yarn_publish_pipe
    configuration:
      jfrogCliVersion: 2
      runtime:
        type: image
        image:
          custom:
            name: releases-docker.jfrog.io/jfrog/pipelines-u18node
            tag: "16"
            autoPull: true
      environmentVariables:
        readOnly:
          TASK_NAME: setup-yarn
          TASK_VERSION: 0.0.1
          TASK_REPOSITORY: pipelines-tasks-local
          RESOLVE_REPO: npm-virtual
    steps:
      - name: build_and_publish_task
        type: Bash
        configuration:
          inputResources:
            - name: setup_yarn_publish
          integrations:
            - name: {{ .Values.artIntegration }}
        execution:
          onExecute:
            # Make sure version was provided
            - test -n "$TASK_VERSION" -a "$TASK_VERSION" != "0.0.0"
            - pushd $res_setup_yarn_publish_resourcePath
            # Configure JFrog CLI
            - jfrog npmc --repo-resolve $RESOLVE_REPO
            # Install npm dependencies
            - jfrog npm install
            # Build task runnable script bundled with dependencies
            - npm run dist
            - popd

            # Run publish task
            - task: jfrog/publish-task@v0.0.2
              id: publish-setup-yarn
              input:
                path: $res_setup_yarn_publish_resourcePath
                targetRepository: $TASK_REPOSITORY
                taskName: $TASK_NAME
                taskVersion: $TASK_VERSION
                includePattern: ^README.md$|^dist

      - name: test_published_task
        type: Bash
        configuration:
          inputSteps:
            - name: build_and_publish_task
          inputResources:
            - name: setup_yarn_publish
        execution:
          onStart:
            - task: jfrog/setup-node@v0.0.1
              id: setup_node
              input:
                version: "{{ .Values.nodeVersion }}"
          onExecute:
            - pushd $res_frogbot_publish_gitrepo_resourcePath
            # Configure JFrog CLI
            - jf npmc --repo-resolve $RESOLVE_REPO
            # Install npm dependencies
            - jf npm install
            # Build task runnable script bundled with dependencies
            - npm run dist
            # create test coverage report
            - npx jest --coverage
            - popd
            # Run task
            - task: setup-yarn@0.0.1
              id: setup_yarn_test
          onComplete:
            - echo "Frogbot Test done!"